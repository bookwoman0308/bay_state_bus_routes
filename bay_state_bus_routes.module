<?php

use Drupal\bay_state_bus_routes\MBTA as MBTA;

 /**
 * @file
 * MBTA Routes and Schedules
 *
 * Displays a page of routes with associated background/text colors and links to the specific schedule for the route.
 */

/**
 * Implements hook_help()
 */
function bay_state_bus_routes_help($path, $arg) {
  switch ($path) {
  case "admin/help#bay_state_bus_routes":
    return '<p>' . t("Displays routes and schedules for MBTA.");
    break;
  }
}

/**
 * Implements hook_menu()
 */
function bay_state_bus_routes_menu() {

    $items = array();

    $items['bay-state'] = array(
      'title' => 'MBTA Routes and Schedules',
      'description' => 'Schedules from MBTA',
      'page callback' => 'bay_state_bus_routes_display',
      'access arguments' => array('access content'),
    );
    $items['bay-state/schedule/%'] = array(
      'title' => 'Route Schedule',
      'page callback' => 'bay_state_bus_routes_schedule_page',
      'access arguments' => array('access content'),
      'page arguments' => array(2),  //pass route_id
    );
    return $items;
  }

/**
 * Page callback that displays the MBTA routes, with associated markup.
 *
 * @param void
 * @return $content
 **/
function bay_state_bus_routes_display() {

  $routes = array();
  $routes = _get_all_routes($routes);

  $output = '';

  if (empty($routes)) {
    $output = 'An error occurred with retrieving route data from the MBTA API. Please try back again later.';
  }

  else {
    $output = _render_route_markup($output, $routes);
  }

  $content['mbta_markup'] = array(
    '#type' => 'markup',
    '#markup' => $output,
  );
 
  return $content;
}

/**
 * Page callback that displays the MBTA routes, with associated markup.
 *
 * @param $routes, an empty array
 * @return $route_attribute_array, which will either contain the route attributes or be empty if the API call failed
 **/
function _get_all_routes($routes) {

  $api_route_call = new MBTA();
  $response = $api_route_call->getRoutes();

  if ($api_route_call->checkResponse($response)) {
    $decoded_response = json_decode($response->data, true);
    $route_array = $decoded_response['data'];

    $route_attribute_array = array();
    foreach ($route_array as $key) {
      $long_name = $key['attributes']['long_name'];
      if ($long_name == '') {
        $long_name = $key['id'];
      }
      else {
        $long_name = $key['attributes']['long_name'];
     }
     $route_attribute_array[] = array(
       'type' => $key['attributes']['description'],
       'long_name' => $long_name,
       'bg_color' => $key['attributes']['color'],
       'text_color' => $key['attributes']['text_color'],
       'route_id' => $key['id'],
       );
    }
  }

  else {
    $route_attribute_array = array();
  }

  return $route_attribute_array;
}

/**
 * Page callback from individual route page. Passes the call to display the form.
 *
 * @param $output, which contains markup code, and $route_attribute_array, the route data from the API
 * @return $output, the markup code that will render all of the route names with their associated colors
 **/
function _render_route_markup($output, $route_attribute_array) {

  drupal_add_css(drupal_get_path('module', 'bay_state_bus_routes') . '/css/styles.css');

  //Identify the transit types from the API call, i.e. Rapid Transit, Local Bus, Ferry, etc.
  $route_types = array_unique(array_column($route_attribute_array, 'type'));

  $output .= '<div class="route">';
  foreach ($route_types as $key => $value) {
    $output .= '<p style="font-size: 14px;"><strong>' . $value . '</strong></p>';
    foreach ($route_attribute_array as $row) {
      if ($row['type'] == $value) {
        $go_to = '/bay-state/schedule/' . $row['route_id'];   //send route_id to page callback
        $output .= '<p style="background-color:#' . $row['bg_color'] . '"><a style="color:#' . $row['text_color'] . '" href="' . $go_to . '">' . $row['long_name'] . '</a></p>';
      }
    }
  }

  $output .= '</div>';
  
  return $output;
}

/**
 * Page callback from individual route page. Passes the call to display the form.
 *
 * @param $route_id
 * @return $form
 **/
function bay_state_bus_routes_schedule_page($route_id) {

  $form = drupal_get_form('bay_state_bus_routes_schedule_form', $route_id);

  return $form;

}

/**
 * Implements hook_form(). It displays the schedule data for the individual route.
 *
 * @param $route_id
 * @return $form
 **/
function bay_state_bus_routes_schedule_form($form, &$form_state, $route_id) {

  $output = '';

  //Make the API call to get the schedule for the specific route id
  $api_schedule_call = new MBTA();
  $api_schedule_call->setRouteID($route_id);  //use route_id that is passed through to render
  $response = $api_schedule_call->getSchedules();

  if ($api_schedule_call->checkResponse($response)) {
    $decoded_response = json_decode($response->data, true);
    $schedules = $decoded_response['data'];
    if (!empty($schedules)) {
      $output = _render_schedule_markup($output, $route_id, $schedules, $api_schedule_call);
    }
    else {
      $date = date('F j, Y', time());
      $output = '<p>There are no vehicles scheduled for route ' . $api_schedule_call->getRouteID() . ' today: ' . $date . '.</p>';
    }
  }

  else {
    $output = '<p>There was an error retrieving scheduling data from the MBTA API. Please try again later.</p>';
  }

  $form = array();

  $form['route']['schedule'] = array(
     '#markup' => $output,
      );

  return $form;
}

/**
 * Renders the schedule data for the individual route.
 *
 * @param $output, an empty string, the $route_id, the $schedules data from the API, and a new object to use one of its methods
 * @return $output, which contains markup that renders the schedule information for the route
 **/
function _render_schedule_markup($output, $route_id, $schedules, $MBTA_obj) {

  $output .= '<p>Today\'s schedule for Route ID: ' . $route_id . '</p>';

  $render_row = array();

  //Build the output row by row from the API data
  foreach ($schedules as $key) {
    $arrival_time = $MBTA_obj->renderTimeFormat($key['attributes']['arrival_time']); //The time string will be i.e. "2017-08-14T15:04:00-04:00"
    $vehicle_name = $key['relationships']['trip']['data']['id'];
    $stop_name = $key['relationships']['stop']['data']['id'];
    //If there are stops and vehicles with names instead of numbers, format them differently
    if (is_numeric($stop_name)) {
      $output .= 'Vehicle ' . $vehicle_name . ' arrives at Stop ' . $stop_name . ' at ' . $arrival_time . '<br>';
    }
    else {
      $output .= $vehicle_name . ' arrives at ' . $stop_name . ' stop at ' . $arrival_time . '<br>';
    }
  }

  return $output;
}
